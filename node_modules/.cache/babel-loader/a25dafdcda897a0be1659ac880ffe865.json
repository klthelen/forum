{"ast":null,"code":"var _jsxFileName = \"/Users/kirkthelen/Documents/forum2/forum/src/subscript/universal/DynamicLink.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst white = \"/assets/gridWnb.png\";\nconst gold = \"/assets/gridGnb.png\"; // Written link navigation\n\nconst Links = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"link\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/About\",\n      children: \"About\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/FAQ\",\n      children: \"FAQ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/Rules\",\n      children: \"Rules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}; // Handles grid image change on hover\n\n\n_c = Links;\n\nconst HoverGrid = props => {\n  function over(e) {\n    e.currentTarget.src = props.hover;\n  }\n\n  function out(e) {\n    e.currentTarget.src = props.image;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: props.image,\n    onMouseOver: over,\n    onMouseOut: out,\n    alt: \"M\",\n    height: \"50px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 12\n  }, this);\n}; // Grid-style navigation\n\n\n_c2 = HoverGrid;\n\nconst Grid = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"gridNav\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      class: \"button\",\n      children: /*#__PURE__*/_jsxDEV(HoverGrid, {\n        image: gold,\n        hover: white\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}; // Determines whether to use grid-style or written link based on resolution\n\n\n_c3 = Grid;\n\nfunction DynamicLink() {\n  _s();\n\n  const updateWidthAndHeight = () => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const [height, setHeight] = React.useState(window.innerHeight);\n\n  if (width > 600) {\n    return /*#__PURE__*/_jsxDEV(Links, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(DynamicLink, \"HlffPSgHgteiLZ+h8pdrq2WlDn4=\");\n\n_c4 = DynamicLink;\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(DynamicLink, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 17\n}, this), rootElement);\nexport default DynamicLink;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Links\");\n$RefreshReg$(_c2, \"HoverGrid\");\n$RefreshReg$(_c3, \"Grid\");\n$RefreshReg$(_c4, \"DynamicLink\");","map":{"version":3,"sources":["/Users/kirkthelen/Documents/forum2/forum/src/subscript/universal/DynamicLink.js"],"names":["React","ReactDOM","white","gold","Links","props","HoverGrid","over","e","currentTarget","src","hover","out","image","Grid","DynamicLink","updateWidthAndHeight","setWidth","window","innerWidth","setHeight","innerHeight","useEffect","addEventListener","removeEventListener","width","useState","height","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst white = \"/assets/gridWnb.png\";\nconst gold = \"/assets/gridGnb.png\";\n\n// Written link navigation\nconst Links = props => {\n    return (\n        <div className=\"link\">\n            <a href=\"/\">Home</a>\n            <a href=\"/About\">About</a>\n            <a href=\"/FAQ\">FAQ</a>\n            <a href=\"/Rules\">Rules</a>\n        </div>\n    )\n}\n\n// Handles grid image change on hover\nconst HoverGrid = props => {\n    function over(e) {\n        e.currentTarget.src = props.hover;\n    }\n    function out(e) {\n        e.currentTarget.src = props.image;\n    }\n    return <img src={props.image} onMouseOver={over} onMouseOut={out} alt=\"M\" height=\"50px\"/>\n};\n\n// Grid-style navigation\nconst Grid = props => {\n    return (\n        <div class=\"gridNav\">   \n            <button type=\"button\" class=\"button\">\n                <HoverGrid image={gold} hover={white}/>\n            </button>\n        </div>\n    )\n}\n\n// Determines whether to use grid-style or written link based on resolution\nfunction DynamicLink () {\n    const updateWidthAndHeight = () => {\n        setWidth(window.innerWidth);\n        setHeight(window.innerHeight);\n    };\n\n    React.useEffect(() => {\n        window.addEventListener(\"resize\", updateWidthAndHeight);\n        return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n    });\n\n    const [width, setWidth] = React.useState(window.innerWidth);\n    const [height, setHeight] = React.useState(window.innerHeight);\n    \n    if(width > 600) {\n        return(<Links />)\n    }\n    else { \n        return (<Grid />)\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<DynamicLink />, rootElement); \nexport default DynamicLink;"]},"metadata":{},"sourceType":"module"}