{"ast":null,"code":"var _jsxFileName = \"/Users/kirkthelen/Documents/forum2/forum/src/subscript/universal/DynamicLink.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = {\n  white: \"/assets/gridWnb.png\",\n  gold: \"/assets/gridGnb.png\"\n}; // Written link navigation\n\nconst Links = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"link\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/About\",\n      children: \"About\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/FAQ\",\n      children: \"FAQ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/Rules\",\n      children: \"Rules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}; // Handles grid image change on hover\n\n\n_c = Links;\n\nconst Hover = props => {\n  function over(me) {\n    me.currentTarget.src = props.hover;\n  }\n\n  function out(me) {\n    me.currentTarget.src = props.default;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: props.default,\n    onMouseOver: over,\n    onMouseOut: out,\n    alt: \"M\",\n    height: \"50px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, this);\n}; // Grid-style navigation\n\n\n_c2 = Hover;\n\nclass Grid extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.container = /*#__PURE__*/React.createRef();\n    this.state = {\n      open: false\n    };\n\n    this.handleButtonClick = () => {\n      this.setState(state => {\n        return {\n          open: !state.open\n        };\n      });\n    };\n\n    this.handleClickOutside = event => {\n      if (this.container.current && !this.container.current.contains(event.target)) {\n        this.setState({\n          open: false\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  render() {\n    let grid_class = this.state.open ? \"gridNavO\" : \"gridNavC\"; // this.state.open -> grid background is gold; !this.state.open -> grid background is transparent\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: grid_class,\n        ref: this.container,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"gridBtn\",\n          onClick: this.handleButtonClick,\n          children: [this.state.open && /*#__PURE__*/_jsxDEV(Hover, {\n            default: images.white,\n            hover: images.white\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 46\n          }, this), !this.state.open && /*#__PURE__*/_jsxDEV(Hover, {\n            default: images.gold,\n            hover: images.white\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), this.state.open && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/\",\n                children: \"Home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 34\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/About\",\n                children: \"About\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 34\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/FAQ\",\n                children: \"FAQ\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 34\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/Rules\",\n                children: \"Rules\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 34\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Determines whether to use grid-style or written link based on resolution\n// Has functionality for \"height\" of window but it's unused and commented out\n\n\nfunction DynamicLink() {\n  _s();\n\n  const updateWidthAndHeight = () => {\n    setWidth(window.innerWidth); // setHeight(window.innerHeight);\n  }; // Event listener that checks if user has resized window\n\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", updateWidthAndHeight);\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n  });\n  const [width, setWidth] = React.useState(window.innerWidth); // const [height, setHeight] = React.useState(window.innerHeight); \n  // Chooses whether to show written links or grid links based on window width\n\n  if (width > 600) {\n    return /*#__PURE__*/_jsxDEV(Links, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(DynamicLink, \"cghfx8FI7JUDmCglGOKxHAxR30E=\");\n\n_c3 = DynamicLink;\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(DynamicLink, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 119,\n  columnNumber: 17\n}, this), rootElement);\nexport default DynamicLink;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Links\");\n$RefreshReg$(_c2, \"Hover\");\n$RefreshReg$(_c3, \"DynamicLink\");","map":{"version":3,"sources":["/Users/kirkthelen/Documents/forum2/forum/src/subscript/universal/DynamicLink.js"],"names":["React","ReactDOM","images","white","gold","Links","props","Hover","over","me","currentTarget","src","hover","out","default","Grid","Component","container","createRef","state","open","handleButtonClick","setState","handleClickOutside","event","current","contains","target","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","grid_class","DynamicLink","updateWidthAndHeight","setWidth","window","innerWidth","useEffect","width","useState","rootElement","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst images = {\n    white: \"/assets/gridWnb.png\",\n    gold: \"/assets/gridGnb.png\",\n}\n// Written link navigation\nconst Links = props => {\n    return (\n        <div className=\"link\">\n            <a href=\"/\">Home</a>\n            <a href=\"/About\">About</a>\n            <a href=\"/FAQ\">FAQ</a>\n            <a href=\"/Rules\">Rules</a>\n        </div>\n    )\n}\n\n// Handles grid image change on hover\nconst Hover = props => {\n    function over(me) {\n        me.currentTarget.src = props.hover;\n    }\n    function out(me) {\n        me.currentTarget.src = props.default;\n    }\n    return <img src={props.default} onMouseOver={over} onMouseOut={out} alt=\"M\" height=\"50px\"/>\n};\n\n// Grid-style navigation\nclass Grid extends React.Component {\n    container = React.createRef();\n    state = {\n        open: false,\n    };\n\n    handleButtonClick = () => {\n        this.setState(state=> {\n            return {\n                open: !state.open,\n            };\n        });\n    };\n\n    componentDidMount() {\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\n    }\n\n    handleClickOutside = event => {\n        if (this.container.current && !this.container.current.contains(event.target)) {\n            this.setState({\n                open: false,\n            });\n        }\n    };\n\n    render() {\n        let grid_class = this.state.open ? \"gridNavO\" : \"gridNavC\";     // this.state.open -> grid background is gold; !this.state.open -> grid background is transparent\n\n        return (\n            <div> {/* Have to return everything in a container */}\n                <div className={grid_class} ref={this.container}>\n                    <button type=\"button\" className={\"gridBtn\"} onClick={this.handleButtonClick}>\n\n                        {/* Changes grid to white grid if the list is open, otherwise it is gold with white hover */}\n                        {this.state.open && (<Hover default={images.white} hover={images.white}/>)}\n                        {!this.state.open && (<Hover default={images.gold} hover={images.white}/>)}\n\n                    </button>\n                    {/* Displays dropdown only when list is open */}\n                    {this.state.open && (\n                        <div className=\"dropdown\">\n                            <ul>\n                            <li> <a href=\"/\">Home</a> </li>\n                            <li> <a href=\"/About\">About</a> </li>\n                            <li> <a href=\"/FAQ\">FAQ</a> </li>\n                            <li> <a href=\"/Rules\">Rules</a> </li>\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\n// Determines whether to use grid-style or written link based on resolution\n// Has functionality for \"height\" of window but it's unused and commented out\nfunction DynamicLink () {\n    const updateWidthAndHeight = () => {\n        setWidth(window.innerWidth);\n        // setHeight(window.innerHeight);\n    };\n\n    // Event listener that checks if user has resized window\n    React.useEffect(() => {\n        window.addEventListener(\"resize\", updateWidthAndHeight);\n        return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\n    });\n\n    const [width, setWidth] = React.useState(window.innerWidth);\n    // const [height, setHeight] = React.useState(window.innerHeight); \n    \n    // Chooses whether to show written links or grid links based on window width\n    if(width > 600) {\n        return (<Links />)\n    }\n    else { \n        return (<Grid />)\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<DynamicLink />, rootElement); \nexport default DynamicLink;"]},"metadata":{},"sourceType":"module"}