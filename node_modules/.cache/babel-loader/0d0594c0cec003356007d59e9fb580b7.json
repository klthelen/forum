{"ast":null,"code":"var _jsxFileName = \"/Users/kirkthelen/Documents/forum2/forum/src/pages/Login.js\",\n    _s = $RefreshSig$();\n\n// import {useState, useEffect} from 'react' // Not currently used?\nimport React from \"react\";\nimport { Navbar, Footer } from '../subscript/universal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginHelper = props => {\n  let loginClass = \"login-container-main\";\n\n  if (props.size < 500) {\n    loginClass = \"login-container-mini\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"page-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"content-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {\n          pageID: 10\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: loginClass,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Log in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              placeholder: \"Email\",\n              required: true //value {email}\n              //onChange={(e) => setEmail(e.target.value)}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              required: true //value {password}\n              //onChange={(e) => setPassword(e.target.value)}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/SignUp\",\n            children: \"Create An Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}; // Determines whether to use grid-style or written link based on width of screen \n\n\n_c = LoginHelper;\n\nfunction Login(props) {\n  _s();\n\n  const updateWidth = () => {\n    setWidth(window.innerWidth);\n  }; // Checks if user has resized window and updates width as necessary\n\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", updateWidth);\n    return () => window.removeEventListener(\"resize\", updateWidth);\n  });\n  const [width, setWidth] = React.useState(window.innerWidth); // Chooses whether to show written links or grid links based on window width\n\n  return /*#__PURE__*/_jsxDEV(LoginHelper, {\n    size: width\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Login, \"cghfx8FI7JUDmCglGOKxHAxR30E=\");\n\n_c2 = Login;\nexport default Login;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginHelper\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"sources":["/Users/kirkthelen/Documents/forum2/forum/src/pages/Login.js"],"names":["React","Navbar","Footer","LoginHelper","props","loginClass","size","Login","updateWidth","setWidth","window","innerWidth","useEffect","addEventListener","removeEventListener","width","useState"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,wBAA7B;;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB,MAAIC,UAAU,GAAG,sBAAjB;;AACA,MAAID,KAAK,CAACE,IAAN,GAAa,GAAjB,EAAsB;AAClBD,IAAAA,UAAU,GAAG,sBAAb;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACK;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAA,8BACG;AAAK,QAAA,EAAE,EAAC,cAAR;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAE;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,EAAE,EAAEA,UAAT;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAKI;AAAA,oCACI;AACA,cAAA,IAAI,EAAG,OADP;AAEA,cAAA,WAAW,EAAG,OAFd;AAGA,cAAA,QAAQ,MAHR,CAIA;AACA;;AALA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ,eASI;AACA,cAAA,IAAI,EAAG,UADP;AAEA,cAAA,QAAQ,MAFR,CAGA;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA,oBATJ,eAgBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eAuBI;AAAG,YAAA,IAAI,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,eA8BG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cA9BH;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH,CAzCD,C,CA2CA;;;KA3CMF,W;;AA4CN,SAASI,KAAT,CAAeH,KAAf,EAAsB;AAAA;;AAClB,QAAMI,WAAW,GAAG,MAAM;AACtBC,IAAAA,QAAQ,CAACC,MAAM,CAACC,UAAR,CAAR;AACH,GAFD,CADkB,CAKlB;;;AACAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AAClBF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCL,WAAlC;AACA,WAAO,MAAME,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCN,WAArC,CAAb;AACH,GAHD;AAKA,QAAM,CAACO,KAAD,EAAQN,QAAR,IAAoBT,KAAK,CAACgB,QAAN,CAAeN,MAAM,CAACC,UAAtB,CAA1B,CAXkB,CAalB;;AACA,sBAAO,QAAC,WAAD;AAAa,IAAA,IAAI,EAAEI;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAfQR,K;;MAAAA,K;AAiBT,eAAeA,KAAf","sourcesContent":["// import {useState, useEffect} from 'react' // Not currently used?\nimport React from \"react\"\nimport {Navbar, Footer} from '../subscript/universal'\n\nconst LoginHelper = props => {\n    let loginClass = \"login-container-main\";\n    if (props.size < 500) {\n        loginClass = \"login-container-mini\";\n    }\n    return (  \n        <div className=\"Login\">\n             <div id=\"page-container\">\n                <div id=\"content-wrap\">\n                    <Navbar pageID={10}/>\n                    <div id={loginClass}>\n                        <h1>Log in</h1>\n                        <h2>Email</h2>\n\n                        {/* */}\n                        <form > \n                            <input\n                            type = \"email\"\n                            placeholder = \"Email\"\n                            required\n                            //value {email}\n                            //onChange={(e) => setEmail(e.target.value)}\n                            />\n                            <h2>Password</h2>\n                            <input\n                            type = \"password\"\n                            required\n                            //value {password}\n                            //onChange={(e) => setPassword(e.target.value)}\n                            />\n                            {/* <h2></h2> */ }\n                            <button>Login</button>\n                        </form>\n                        <a href=\"/SignUp\">Create An Account</a>\n                    </div>\n\n                </div>\n                <Footer />\n            </div>\n        </div>\n    );\n}\n\n// Determines whether to use grid-style or written link based on width of screen \nfunction Login(props) {\n    const updateWidth = () => {\n        setWidth(window.innerWidth);\n    };\n\n    // Checks if user has resized window and updates width as necessary\n    React.useEffect(() => {\n        window.addEventListener(\"resize\", updateWidth);\n        return () => window.removeEventListener(\"resize\", updateWidth);\n    });\n\n    const [width, setWidth] = React.useState(window.innerWidth);\n\n    // Chooses whether to show written links or grid links based on window width\n    return(<LoginHelper size={width} />)\n}\n \nexport default Login;"]},"metadata":{},"sourceType":"module"}